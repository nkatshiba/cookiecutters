[tool.poetry]
name = "{{ cookiecutter.__project_name_kebab_case }}"
packages = [{include = "{{ cookiecutter.project_slug }}", from = "src"}]
version = "{{ cookiecutter.version }}"
description = "{{ cookiecutter.project_description }}"
authors = ["{{ cookiecutter.author_name }} <{{ cookiecutter.author_email }}>"]
repository = "{{ cookiecutter.project_url }}"
readme = "README.md"

[tool.poetry.scripts]
app = "{{ cookiecutter.__project_name_snake_case }}.cli:app"

[tool.poetry.dependencies]
python = ">=3.9,<4.0"
poethepoet = ">=0.25.0"
typer = { extras = ["all"], version = ">=0.12.0" }


[tool.poetry.group.test.dependencies]  # https://python-poetry.org/docs/master/managing-dependencies/
coverage = { extras = ["toml"], version = ">=7.4.4" }
mypy = ">=1.9.0"
poethepoet = ">=0.25.0"
pytest = ">=8.1.1"
pytest-mock = ">=3.14.0"
pytest-xdist = ">=3.5.0"

# [tool.poetry.dev-dependencies]
# pytest = "^6.2"

[[tool.poetry.source]]
name = "pypi"
priority = "primary"

[[tool.poetry.source]]
name = "pytorch"
url = "https://download.pytorch.org/whl/cpu"
priority = "explicit"

[tool.poetry.group.torch]
optional = true

[tool.poetry.group.torch.dependencies]
torch = {version = "^2.3.0+cpu", source = "pytorch"}
torchvision = {version = "^0.18.0+cpu", source = "pytorch"}
matplotlib = "^3.9.0"
tqdm = "^4.66.4"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.coverage.report]  # https://coverage.readthedocs.io/en/latest/config.html#report
precision = 1
show_missing = true
skip_covered = true

[tool.coverage.run]  # https://coverage.readthedocs.io/en/latest/config.html#run
branch = true
command_line = "--module pytest"
data_file = "reports/.coverage"
source = ["src"]

# [tool.coverage.xml]  # https://coverage.readthedocs.io/en/latest/config.html#xml
# output = "reports/coverage.xml"

[tool.mypy]  # https://mypy.readthedocs.io/en/latest/config_file.html
junit_xml = "reports/mypy.xml"
ignore_missing_imports = true
pretty = true
show_column_numbers = true
show_error_codes = true
show_error_context = true
warn_unreachable = true


[tool.pytest.ini_options]  # https://docs.pytest.org/en/latest/reference/reference.html#ini-options-ref
addopts = "--color=yes --doctest-modules --exitfirst --failed-first --verbosity=2 --junitxml=reports/pytest.xml"
testpaths = ["src", "tests"]
xfail_strict = true


[tool.poe.tasks]  # https://github.com/nat-n/poethepoet


  [tool.poe.tasks.init]
  help = "Initialize project"

    [[tool.poe.tasks.init.sequence]]
    cmd = "poetry install"

    [[tool.poe.tasks.init.sequence]]
    cmd = "echo 'Generating Pyright/LSP configuration...'"

    [[tool.poe.tasks.init.sequence]]
    shell = "./scripts/configure_pyright.sh"

    [[tool.poe.tasks.init.sequence]]
    cmd = "echo 'Initializing git repository...'"

    [[tool.poe.tasks.init.sequence]]
    shell = "git init"


  [tool.poe.tasks.app]
  help = "Execute app"

    [[tool.poe.tasks.app.sequence]]
    cmd = "echo 'Executing {{ cookiecutter.__project_name_snake_case }}.cli:app...'"

    [[tool.poe.tasks.app.sequence]]
    cmd = "poetry run app"

  [tool.poe.tasks.test]
  help = "Test this app/package"

    [[tool.poe.tasks.test.sequence]]
    cmd = "coverage run"

    [[tool.poe.tasks.test.sequence]]
    cmd = "coverage report"


    # [[tool.poe.tasks.test.sequence]]
    # cmd = "coverage xml"

# pyrightconfig.json
